fun readFile(filename) =
    let val file = TextIO.openIn filename
        val content = TextIO.inputAll file
        val _ = TextIO.closeIn file
    in String.tokens (fn c => c = #"\n") content
    end
    
val fragments = readFile "fragments.txt"    

val tokens = fn x => List.map Char.toString (String.explode x)

val words = ["HeONiCu", "aaaa", "klaada", "amai", "oea", "iiumea"];

val words = List.map tokens words;

fun compareFrag(_,[]) = false
  | compareFrag(tok,h::t) =
  	if tok = h
  		then true
  		else compareFrag(tok,t)
  		
fun parseS (tokens,n) = compareFrag(List.nth(tokens,n),fragments)			            
			       
fun parseDF (tokens,n,t) = if (t = 2 orelse n >= List.length(tokens)-1)
				then false
				else compareFrag(List.nth(tokens,n)^List.nth(tokens,n+1),fragments)

fun parseDB (tokens,n,t) = if (t = 2 orelse n = 0)
				then false
				else compareFrag(List.nth(tokens,n-1)^List.nth(tokens,n),fragments)			            

fun verify (w,n,t) = if n >= List.length(w) 
			then String.concat(w)
			else if parseS(w,n)
				then verify(w,n+1,1)
				else if parseDF(w,n,t)
					then verify(w,n+2,2)
					else if parseDB(w,n,t)
						then verify(w,n+1,2)
						else String.concat([])

fun writeFile(x,filename) = 
	(let val file = TextIO.openOut(filename)
         val _ = TextIO.output(file,x);
    in TextIO.closeOut(file);
    end)

